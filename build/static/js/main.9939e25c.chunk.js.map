{"version":3,"sources":["services/persons.js","components/Numbers.js","components/Search.js","components/Forms.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","exportObj","getAll","axios","get","then","response","data","create","newObject","post","deleteEntry","id","delete","update","put","Numbers","props","firstAndLast","no","onClick","event","window","confirm","personServices","entryID","setPersons","persons","filter","p","catch","error","alert","Search","value","searchTerm","onChange","setSearch","target","Forms","onSubmit","preventDefault","some","nameElement","name","newName","findPersonObj","find","newPersonObj","number","newNumber","responseObj","map","setAddedMessage","setTimeout","newNameObject","returnedPerson","concat","console","log","setNewName","setNewNumber","type","Notification","message","className","App","useState","addedMessage","useEffect","initialList","nameFilter","length","person","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9939e25c.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst deleteEntry = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst exportObj = {\n    getAll,\n    create,\n    deleteEntry,\n    update\n}\nexport default exportObj","import React from 'react'\nimport personServices from '../services/persons'\n\n\n\nconst Numbers = (props) => {\n    const handleDelete = (event) => {\n        if(window.confirm(`Delete ${props.firstAndLast}?`))\n        {\n            personServices\n                .deleteEntry(props.entryID)\n                .then( response => {\n                    props.setPersons(props.persons.filter(p => p.id !== props.entryID))\n                })\n                .catch(error => {\n                    window.alert('The entry has already been deleted')\n                    props.setPersons(props.persons.filter(p => p.id !== props.entryID))\n                })\n        }\n    }\n    \n    return (\n        <li>\n        {props.firstAndLast} {props.no} {' '}\n        <button onClick={handleDelete}>Delete Entry</button>\n        </li>\n    )\n}\n\nexport default Numbers","import React from 'react'\n\nconst Search = (props) => { \n    //event handler to set search term\n    const handleSearch = (event) => {\n        props.setSearch(event.target.value)\n    }\n    \n    return (\n        \n        <div>\n            Search Name: <input value={props.searchTerm} onChange={handleSearch}/>\n        </div>\n    )\n}\nexport default Search","import React from 'react'\nimport personServices from '../services/persons'\n\n/* import axios from 'axios' */\n\nconst Forms = (props) => {\n    /* const [addedMessage, setAddedMessage] = useState(null) */\n    const handleNameChange = (event) => {\n        console.log(event.target.value)\n        props.setNewName(event.target.value)\n      }\n    \n    const handleNumberChange = (event) => {\n        props.setNewNumber(event.target.value)\n      }\n\n    const addNameAndNumber = (event) => {\n        /* Add name and number to the list of notes */\n        \n        event.preventDefault() //prevents refreshing page on submit\n        const checkNameinArray = props.persons.some(nameElement => \n            nameElement.name === props.newName)\n        \n        if (checkNameinArray === true)\n        {\n          if(window.confirm(`${props.newName} is already in the phonebook,\n          replace old number with a new one?`))\n          {\n            const findPersonObj = props.persons.find(p => p.name === props.newName)\n            const newPersonObj = {...findPersonObj, number : props.newNumber}\n\n            personServices\n              .update(findPersonObj.id, newPersonObj)\n              .then(responseObj => {\n                props.setPersons(props.persons.map(p => p.id !== newPersonObj.id ? p : responseObj ))\n              })\n              /*If we try to update a number that has already been delete from server*/\n              .catch(error => {\n                props.setAddedMessage(`Information of ${props.newName} has already\n                been deleted from the server`)\n                setTimeout(() => {\n                  props.setAddedMessage(null)\n                }, 4000)\n                props.setPersons(props.persons.filter(p => p.id !== props.entryID))\n              })\n              \n\n              \n          }\n        }\n        else {\n            const newNameObject = {\n            name: props.newName,\n            number: props.newNumber\n            }\n            personServices\n              .create(newNameObject)\n              .then(returnedPerson => {\n                props.setPersons(props.persons.concat(returnedPerson))\n                props.setAddedMessage(`Added ${props.newName}`)\n                setTimeout(() => {\n                  props.setAddedMessage(null)\n                }, 4000)\n               })\n               \n\n        }\n    }\n      \n    return (\n        <form onSubmit={addNameAndNumber}>\n        <div>\n          Name: <input value={props.newName} onChange={handleNameChange}/>\n        </div>\n        <div>\n          Number: <input value={props.newNumber} onChange={handleNumberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">Add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default Forms","import React from 'react'\n\nconst Notification = ({message}) => {\n    if (message === null)\n        return  null\n    else {\n        return (\n        <div className='error'>{message}</div>\n        )\n    }\n}\n\nexport default Notification","/* Phone book app with effect hooks and data from JSON serve */\nimport React, {useState, useEffect} from 'react'\nimport Numbers from './components/Numbers'\nimport Search from './components/Search'\nimport Forms from './components/Forms'\nimport Notification from './components/Notification'\nimport personServices from './services/persons'\nimport './index.css'\n\n\nconst App = () => {\n \n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('Enter Name')\n  const [newNumber, setNewNumber] = useState('Enter New Number')\n  const [searchTerm, setSearch] = useState('')\n  const [addedMessage, setAddedMessage] = useState(null)\n  \n\n\n  const hook = () => {\n    personServices\n      .getAll()\n      .then(initialList =>{\n        setPersons(initialList)\n      })\n  }\n  useEffect(hook,[])\n\n  const nameFilter = searchTerm.length === 0 ? persons : \n    persons.filter(person => \n      person.name.toLowerCase().includes(searchTerm.toLowerCase()))\n  \n  return (\n    <div>\n      \n      <h2>Phonebook</h2>\n\n      <Notification message={addedMessage}/>\n      \n      <Search searchTerm={searchTerm} setSearch={setSearch}/>\n     \n      <h2>Add New Entry Please</h2>\n\n      <Forms \n      newName={newName} newNumber={newNumber} \n      setNewName={setNewName} setNewNumber={setNewNumber}\n      persons={persons} setPersons={setPersons}\n      addedMessage={addedMessage} setAddedMessage={setAddedMessage}\n      entryID={persons.id}/>\n\n      <h2>Numbers</h2>\n\n      {nameFilter.map(person =>\n        <Numbers key={person.id} firstAndLast = {person.name} entryID={person.id}\n        no={person.number} persons={persons} setPersons={setPersons} />)}\n    \n    </div>\n  )\n\n\n}\n\nexport default App","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, \n  document.getElementById('root'))"],"sourceRoot":""}